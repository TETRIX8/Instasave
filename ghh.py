import os
import random
import requests
import snapsave_downloader
import nest_asyncio
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes
from telegram.ext import filters
import re
import json
from datetime import datetime

# –ü—Ä–∏–º–µ–Ω—è–µ–º nest_asyncio
nest_asyncio.apply()

API_TOKEN = '8175382946:AAEojtokkTqyvYCZQUv0RR6oMX1gJQW2hMk'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_IDS = [5045561884]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
USERS_FILE = 'users.json'

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_state = {}

# –°–ø–∏—Å–æ–∫ —Å—Ç–∏–∫–µ—Ä–æ–≤
STICKERS = [
    "CAACAgIAAxkBAAEOUnVoAXW8algg-cglzasyJI3o9DNGwgACTgIAAladvQow_mttgTIDbzYE",
    "CAACAgIAAxkBAAENB5dnIA2XPTs40pOjKDjMQOtIh-UtjwACTgADWbv8JQ3rz9n50HgqNgQ"
]

def load_users():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞"""
    default_data = {
        "users": [],
        "stats": {
            "total_users": 0,
            "last_update": str(datetime.now())
        }
    }
    
    try:
        if os.path.exists(USERS_FILE):
            with open(USERS_FILE, 'r') as f:
                data = json.load(f)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
                if "users" not in data or "stats" not in data:
                    return default_data
                return data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
    
    return default_data

def save_users(users_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    try:
        with open(USERS_FILE, 'w') as f:
            json.dump(users_data, f, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

def add_user(user_id, username):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É"""
    users_data = load_users()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if not any(user['id'] == user_id for user in users_data["users"]):
        users_data["users"].append({
            "id": user_id,
            "username": username or "–Ω–µ—Ç username",
            "first_seen": str(datetime.now()),
            "last_activity": str(datetime.now())
        })
        users_data["stats"]["total_users"] = len(users_data["users"])
        users_data["stats"]["last_update"] = str(datetime.now())
        save_users(users_data)

async def send_random_sticker(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Å—Ç–∏–∫–µ—Ä"""
    sticker_id = random.choice(STICKERS)
    await update.message.reply_sticker(sticker_id)

def download_video(url):
    try:
        response = requests.get(url, stream=True)
        if response.status_code == 200:
            return response.content
        else:
            print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. HTTP —Å—Ç–∞—Ç—É—Å:", response.status_code)
            return None
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        return None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.message.from_user
    add_user(user.id, user.username)
    
    beautiful_text = """
‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Instagram Downloader Bot! ‚ú®

–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–∫–∞—á–∞—Ç—å:
‚Ä¢ –í–∏–¥–µ–æ –∏–∑ Instagram üé•
‚Ä¢ –§–æ—Ç–æ –∏–∑ Instagram üì∏
‚Ä¢ –ò—Å—Ç–æ—Ä–∏–∏ –∏–∑ Instagram üéûÔ∏è

–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é, –∏ —è –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂—É –µ—ë –¥–ª—è –≤–∞—Å!

üëá –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É —Å–µ–π—á–∞—Å üëá
"""
    await update.message.reply_text(beautiful_text)
    await send_random_sticker(update, context)

def is_instagram_url(url):
    instagram_pattern = r'https?://(www\.)?(instagram\.com|instagr\.am)/.*'
    return re.match(instagram_pattern, url) is not None

async def handle_video_url(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user = update.message.from_user
    add_user(user.id, user.username)
    
    user_id = user.id
    
    if user_id in user_state and user_state[user_id] == "processing":
        await update.message.reply_text("‚è≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ —è –∑–∞–≥—Ä—É–∂–∞—é –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ...")
        return

    user_state[user_id] = "processing"

    instagram_video_url = update.message.text
    await update.message.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É —Å—Å—ã–ª–∫—É...")
    await send_random_sticker(update, context)

    if not is_instagram_url(instagram_video_url):
        await update.message.reply_text("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç –∏–∑ Instagram.")
        user_state[user_id] = "idle"
        return

    print(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≤–∏–¥–µ–æ: {instagram_video_url}")
    download_url = snapsave_downloader.SnapSave(instagram_video_url)

    if download_url:
        print(f"–°—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {download_url}")
        video_content = download_video(download_url)
        
        if video_content:
            beautiful_caption = """
‚úÖ –í–∞—à–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ!

–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞! 
–ï—Å–ª–∏ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Å–µ—Ä–≤–∏—Å, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–º —Å –¥—Ä—É–∑—å—è–º–∏ üòä

#Instagram #Downloader #Bot
"""
            await update.message.reply_video(video=video_content, caption=beautiful_caption)
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å –≤–∏–¥–µ–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é —Å—Å—ã–ª–∫—É.")
    else:
        await update.message.reply_text("""
‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏

–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:
1. –°—Å—ã–ª–∫–∞ –Ω–µ–≤–µ—Ä–Ω–∞
2. –ö–æ–Ω—Ç–µ–Ω—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π
3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
""")

    user_state[user_id] = "idle"

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
    user = update.message.from_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    admin_text = """
üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å üëë

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
1. /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞
2. /broadcast - –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
3. /export_users - –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
4. /admin_help - –ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º
"""
    await update.message.reply_text(admin_text)

async def admin_help(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º"""
    user = update.message.from_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    help_text = """
‚ÑπÔ∏è –ü–æ–º–æ—â—å –ø–æ –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞–º ‚ÑπÔ∏è

/stats - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞:
  - –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  - –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å

/broadcast - –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:
  –ü—Ä–∏–º–µ—Ä: /broadcast –ü—Ä–∏–≤–µ—Ç –≤—Å–µ–º! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞.

/export_users - –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª

/admin_help - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
"""
    await update.message.reply_text(help_text)

async def bot_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    user = update.message.from_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    users_data = load_users()
    
    stats_text = f"""
üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞ üìä

üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_data["stats"]["total_users"]}
üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {users_data["stats"]["last_update"]}

üìà –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
"""
    
    last_users = users_data["users"][-5:] if len(users_data["users"]) > 5 else users_data["users"]
    for i, user in enumerate(reversed(last_users), 1):
        username = user.get('username', '–Ω–µ—Ç username')
        stats_text += f"\n{i}. @{username} (ID: {user['id']}) - {user['first_seen']}"
    
    await update.message.reply_text(stats_text)

async def broadcast_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–†–∞—Å—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    user = update.message.from_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    if not context.args:
        await update.message.reply_text("‚ÑπÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /broadcast –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    
    message = ' '.join(context.args)
    users_data = load_users()
    total = len(users_data["users"])
    success = 0
    failed = 0
    
    await update.message.reply_text(f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    for user in users_data["users"]:
        try:
            await context.bot.send_message(chat_id=user['id'], text=message)
            success += 1
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['id']}: {e}")
            failed += 1
    
    report_text = f"""
üì® –û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ üì®

‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}
‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}
üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total}
"""
    await update.message.reply_text(report_text)

async def export_users(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª"""
    user = update.message.from_user
    
    if user.id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    users_data = load_users()
    with open('users_export.txt', 'w') as f:
        for user in users_data["users"]:
            username = user.get('username', '–Ω–µ—Ç username')
            f.write(f"ID: {user['id']}, Username: @{username}, First seen: {user['first_seen']}\n")
    
    await update.message.reply_document(document=open('users_export.txt', 'rb'), caption="üìù –≠–∫—Å–ø–æ—Ä—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

async def main() -> None:
    application = ApplicationBuilder().token(API_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(CommandHandler("admin_help", admin_help))
    application.add_handler(CommandHandler("stats", bot_stats))
    application.add_handler(CommandHandler("broadcast", broadcast_message))
    application.add_handler(CommandHandler("export_users", export_users))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_video_url))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    await application.run_polling()

if __name__ == '__main__':
    import asyncio
    asyncio.run(main())